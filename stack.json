{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description": "Jenkins Stack from stack.json",
  "Parameters": {
     "VpcIdd": {
       "Type": "AWS::EC2::VPC::Id",
       "Description": "Target VPC ID"
     },
    "SubnetIdd": {
      "Type": "AWS::EC2::Subnet::Id",
      "Description": "The target subnet Id"
    },
    "KeyNamed": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description": "precreated SSH keypair"
    }
  },

  "Resources": {
   "EC2Instance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "ImageId": "ami-1b90a67e",
        "InstanceType": "t2.micro",
        "SubnetId": { "Ref": "SubnetIdd" },
        "KeyName": { "Ref": "KeyNamed" },
        "SecurityGroupIds": [ { "Ref": "EC2InstanceSecurityGroupw" }  ],
        "IamInstanceProfile": { "Ref": "EC2InstanceProfile"   },
        "UserData": {
           "Fn::Base64": { "Fn::Join": ["", [
              "#!/bin/bash\n",
              "echo ECS_CLUSTER=", { "Ref": "EcsCluster"  }, " >> /etc/ecs/ecs.config\n",
              "groupadd -g 1000 jenkins\n",
              "useradd -u 1000 -g jenkins jenkins\n",
              "mkdir -p /ecs/jenkins_home\n",
              "chown -R jenkins:jenkins /ecs/jenkins_home\n"
           ]  ]
          }
        },
        "Tags": [ {"Key": "Name", "Value": { "Fn::Join": ["", [ {"Ref": "AWS::StackName" }, "-instancewww"  ] ]  }  }   ]
      }
    },
   "EC2InstanceSecurityGroupw": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": { "Fn::Join": ["", [ { "Ref": "AWS::StackName"  }, " ingress security group"  ]   ]  },
        "VpcId": { "Ref": "VpcIdd"  },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "8080",
            "ToPort":  "8080",
            "SourceSecurityGroupId": { "Ref": "ElbSecurityGroup"  }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort":  "22",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
   },
   "EC2InstanceProfile": {
    "Type": "AWS::IAM::InstanceProfile",
    "Properties": {
      "Path": "/",
      "Roles": [ { "Ref": "EC2InstanceRole"}  ]
    }
   },
   "EC2InstanceRole": {
    "Type": "AWS::IAM::Role",
    "Properties": {
       "AssumeRolePolicyDocument": {
         "Version": "2012-10-17",
         "Statement": [
           {
             "Effect": "Allow",
             "Principal": { "Service": [ "ecs.amazonaws.com", "ec2.amazonaws.com" ]  },
             "Action": [ "sts:AssumeRole" ]
           }
          ]
       },
       "Path": "/",
       "ManagedPolicyArns": [ "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role" ]
    }
   },
   "ElbSecurityGroup": {
     "Type": "AWS::EC2::SecurityGroup",
     "Properties": {
       "GroupDescription": { "Fn::Join": ["", [ { "Ref": "AWS::StackName" }, " ELB ingress security group"  ]   ]  },
       "VpcId": { "Ref": "VpcIdd" },
       "SecurityGroupIngress": [
         {
         "IpProtocol": "tcp",
         "FromPort": "80",
         "ToPort": "80",
         "CidrIp": "0.0.0.0/0"
        }
       ],
      "Tags": [
        {
        "Key": "Name",
        "Value": { "Fn::Join": ["", [ { "Ref": "AWS::StackName" }, "-elb-SG"  ]   ]   }
        }
      ]
     }
   },
   "ElasticLoadBalancer": {
    "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
    "Properties": {
       "CrossZone": "false",
       "SecurityGroups": [ { "Ref": "ElbSecurityGroup" }  ],
       "Listeners": [
          {
            "LoadBalancerPort": "80",
            "InstancePort": "8080",
            "Protocol": "http"
          }
       ],
       "Instances": [ { "Ref": "EC2Instance"  }  ],
       "Subnets": [ { "Ref": "SubnetIdd" } ]
    }
   },
   "EcsCluster": {
      "Type": "AWS::ECS::Cluster"
   },
   "EcsTaskDefinition": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "ContainerDefinitions": [
          {
            "Name": "jenkins",
            "Image": "wsoyinka/jenkins1",
            "Memory": 900,
            "PortMappings": [
              {
                "ContainerPort": 8080,
                "HostPort": 8080
              }
            ],
            "MountPoints": [
              {
                "SourceVolume": "docker",
                "ContainerPath": "/var/run/docker.sock"
              },
              {
                "SourceVolume": "jenkins_home",
                "ContainerPath": "/var/jenkins_home"
              }
            ]
          }
        ],
        "Volumes": [
          {
            "Name": "jenkins_home",
            "Host": { "SourcePath": "/ecs/jenkins_home" }
          },
          {
            "Name": "docker",
            "Host": { "SourcePath": "/var/run/docker.sock" }
          }
        ]
      }
   },
   "EcsService": {
      "Type": "AWS::ECS::Service",
      "Properties": {
        "Cluster": { "Ref": "EcsCluster" },
        "TaskDefinition": {"Ref": "EcsTaskDefinition" },
        "DesiredCount": 1
      }
    }
  },
  "Outputs": {
    "ElbDomainName": {
      "Description": "Public DNS name of Elastic Load Balancer",
      "Value": {
        "Fn::GetAtt": [
          "ElasticLoadBalancer",
          "DNSName"
        ]
      }
    },
    "EC2InstanceDomainName": {
      "Description": "Public DNS name of EC2 Instance",
      "Value": {
        "Fn::GetAtt": [
          "EC2Instance",
          "PublicDnsName"
        ]
      }
    }
  }

}
